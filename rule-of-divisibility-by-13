// INSTRUCTIONS:
// When you divide the successive powers of 10 by 13 you get the following remainders of the 
// integer divisions:
// 1, 10, 9, 12, 3, 4.

// Then the whole pattern repeats.

// Hence the following method: Multiply the right most digit of the number with the left most number
// in the sequence shown above, the second right most digit to the second left most digit of the number
// in the sequence. The cycle goes on and you sum all these products. Repeat this process until the
// sequence of sums is stationary.

// ...........................................................................

// Example: What is the remainder when 1234567 is divided by 13?
// 7×1 + 6×10 + 5×9 + 4×12 + 3×3 + 2×4 + 1×1 = 178
// We repeat the process with 178:
// 8x1 + 7x10 + 1x9 = 87
// and again with 87:
// 7x1 + 8x10 = 87

// ...........................................................................

// From now on the sequence is stationary and the remainder of 1234567 by 13 is the same as the
// remainder of 87 by 13: 9

// Call thirt the function which processes this sequence of operations on an integer n (>=0).
// thirt will return the stationary number.

// thirt(1234567) calculates 178, then 87, then 87 and returns 87.

// thirt(321) calculates 48, 48 and returns 48

// ANSWER:

function thirt(n) {
    var intDivisions = [1, 10, 9, 12, 3, 4];
    var nArr = [];
    var sum = 0;

    // Iterate until the sequence is stationary
    while (n !== sum) {
        // Convert n into a string and split the string into an array of single digits
        nArr = Number(n).toString().split("");
        // Iterate through nArr following the method described on line 8 above
        for (var i = nArr.length - 1, j = 0; i >= 0; i-- , j++) {
            // If n has more digits than intDivisions, circle back to the beginning of intDivisions
            // and cycle through those numbers again 
            if (j === intDivisions.length) {
                j = 0;
            }
            sum += nArr[i] * intDivisions[j];
        }
        // Indicates the sequence is not stationary, loop again
        if (n !== sum) {
            n = sum;
            sum = 0;
        }
    }
    // Return the stationary number
    return n;
}